/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface AbiInterface extends utils.Interface {
  functions: {
    "DEAD()": FunctionFragment;
    "DECIMALS()": FunctionFragment;
    "InsuranceFundFee()": FunctionFragment;
    "InsuranceFundReceiver()": FunctionFragment;
    "MAX_UINT256()": FunctionFragment;
    "RATE_DECIMALS()": FunctionFragment;
    "ZERO()": FunctionFragment;
    "_autoAddLiquidity()": FunctionFragment;
    "_autoRebase()": FunctionFragment;
    "_decimals()": FunctionFragment;
    "_initRebaseStartTime()": FunctionFragment;
    "_isFeeExempt(address)": FunctionFragment;
    "_lastAddLiquidityTime()": FunctionFragment;
    "_lastRebasedTime()": FunctionFragment;
    "_metisRewardEnabled()": FunctionFragment;
    "_name()": FunctionFragment;
    "_symbol()": FunctionFragment;
    "_totalSupply()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "autoLiquidityReceiver()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "blackHole()": FunctionFragment;
    "blackHoleFee()": FunctionFragment;
    "blacklist(address)": FunctionFragment;
    "checkFeeExempt(address)": FunctionFragment;
    "checkPoints(address)": FunctionFragment;
    "claim()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "devAddress()": FunctionFragment;
    "devFee()": FunctionFragment;
    "disableAllFee()": FunctionFragment;
    "distributorAddress()": FunctionFragment;
    "distributorGas()": FunctionFragment;
    "feeDenominator()": FunctionFragment;
    "getAccountDividendsInfo()": FunctionFragment;
    "getCirculatingSupply()": FunctionFragment;
    "getLiquidityBacking(uint256)": FunctionFragment;
    "getMaxTokenPerWallet()": FunctionFragment;
    "getOverviewOf(address)": FunctionFragment;
    "getReserve1()": FunctionFragment;
    "getReserve2(address)": FunctionFragment;
    "getTimeframeQuotaIn()": FunctionFragment;
    "getTimeframeQuotaOut()": FunctionFragment;
    "inAmounts(uint256,address)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize()": FunctionFragment;
    "isNotInSwap()": FunctionFragment;
    "isOpen()": FunctionFragment;
    "liquidityFee()": FunctionFragment;
    "manualSync()": FunctionFragment;
    "maxTokenPerWalletPercent()": FunctionFragment;
    "metisFee()": FunctionFragment;
    "metisRewardStore()": FunctionFragment;
    "name()": FunctionFragment;
    "openTrade()": FunctionFragment;
    "outAmounts(uint256,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pair()": FunctionFragment;
    "pairContract()": FunctionFragment;
    "pause(bool)": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "router()": FunctionFragment;
    "secureOperators(address)": FunctionFragment;
    "secureTransfer(address,address,uint256)": FunctionFragment;
    "setAutoAddLiquidity(bool)": FunctionFragment;
    "setAutoRebase(bool)": FunctionFragment;
    "setBotBlacklist(address,bool)": FunctionFragment;
    "setCheckPoint(address,uint256)": FunctionFragment;
    "setDevInfo(address,uint256)": FunctionFragment;
    "setDisableAllFee(bool)": FunctionFragment;
    "setDistributeGas(uint256)": FunctionFragment;
    "setDistributor(address)": FunctionFragment;
    "setFeeReceivers(address,address,address,address)": FunctionFragment;
    "setFees(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setLP(address)": FunctionFragment;
    "setMaxTokenPerWalletPercent(uint32)": FunctionFragment;
    "setMetisRewardEnabled(bool)": FunctionFragment;
    "setSecureOperator(address,bool)": FunctionFragment;
    "setTimeframeExpiresAfter(uint256)": FunctionFragment;
    "setTimeframeQuotaIn(uint256)": FunctionFragment;
    "setTimeframeQuotaOut(uint256)": FunctionFragment;
    "setWhitelist(address,bool)": FunctionFragment;
    "swapEnabled()": FunctionFragment;
    "symbol()": FunctionFragment;
    "timeframeCurrent()": FunctionFragment;
    "timeframeExpiresAfter()": FunctionFragment;
    "timeframeQuotaInPercentage()": FunctionFragment;
    "timeframeQuotaOutPercentage()": FunctionFragment;
    "totalFee()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasuryExtraSellFee()": FunctionFragment;
    "treasuryFee()": FunctionFragment;
    "treasuryReceiver()": FunctionFragment;
    "withdrawAllToTreasury()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEAD"
      | "DECIMALS"
      | "InsuranceFundFee"
      | "InsuranceFundReceiver"
      | "MAX_UINT256"
      | "RATE_DECIMALS"
      | "ZERO"
      | "_autoAddLiquidity"
      | "_autoRebase"
      | "_decimals"
      | "_initRebaseStartTime"
      | "_isFeeExempt"
      | "_lastAddLiquidityTime"
      | "_lastRebasedTime"
      | "_metisRewardEnabled"
      | "_name"
      | "_symbol"
      | "_totalSupply"
      | "allowance"
      | "approve"
      | "autoLiquidityReceiver"
      | "balanceOf"
      | "blackHole"
      | "blackHoleFee"
      | "blacklist"
      | "checkFeeExempt"
      | "checkPoints"
      | "claim"
      | "decimals"
      | "decreaseAllowance"
      | "devAddress"
      | "devFee"
      | "disableAllFee"
      | "distributorAddress"
      | "distributorGas"
      | "feeDenominator"
      | "getAccountDividendsInfo"
      | "getCirculatingSupply"
      | "getLiquidityBacking"
      | "getMaxTokenPerWallet"
      | "getOverviewOf"
      | "getReserve1"
      | "getReserve2"
      | "getTimeframeQuotaIn"
      | "getTimeframeQuotaOut"
      | "inAmounts"
      | "increaseAllowance"
      | "initialize"
      | "isNotInSwap"
      | "isOpen"
      | "liquidityFee"
      | "manualSync"
      | "maxTokenPerWalletPercent"
      | "metisFee"
      | "metisRewardStore"
      | "name"
      | "openTrade"
      | "outAmounts"
      | "owner"
      | "pair"
      | "pairContract"
      | "pause"
      | "paused"
      | "renounceOwnership"
      | "router"
      | "secureOperators"
      | "secureTransfer"
      | "setAutoAddLiquidity"
      | "setAutoRebase"
      | "setBotBlacklist"
      | "setCheckPoint"
      | "setDevInfo"
      | "setDisableAllFee"
      | "setDistributeGas"
      | "setDistributor"
      | "setFeeReceivers"
      | "setFees"
      | "setLP"
      | "setMaxTokenPerWalletPercent"
      | "setMetisRewardEnabled"
      | "setSecureOperator"
      | "setTimeframeExpiresAfter"
      | "setTimeframeQuotaIn"
      | "setTimeframeQuotaOut"
      | "setWhitelist"
      | "swapEnabled"
      | "symbol"
      | "timeframeCurrent"
      | "timeframeExpiresAfter"
      | "timeframeQuotaInPercentage"
      | "timeframeQuotaOutPercentage"
      | "totalFee"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "treasuryExtraSellFee"
      | "treasuryFee"
      | "treasuryReceiver"
      | "withdrawAllToTreasury"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "DEAD", values?: undefined): string;
  encodeFunctionData(functionFragment: "DECIMALS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "InsuranceFundFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "InsuranceFundReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_UINT256",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RATE_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ZERO", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_autoAddLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_autoRebase",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_initRebaseStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_isFeeExempt",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "_lastAddLiquidityTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_lastRebasedTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_metisRewardEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_name", values?: undefined): string;
  encodeFunctionData(functionFragment: "_symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "autoLiquidityReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "blackHole", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "blackHoleFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blacklist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkFeeExempt",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkPoints",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "devAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "devFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "disableAllFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributorGas",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeDenominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountDividendsInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCirculatingSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityBacking",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxTokenPerWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOverviewOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserve1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReserve2",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeframeQuotaIn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeframeQuotaOut",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "inAmounts",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isNotInSwap",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isOpen", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidityFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "manualSync",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTokenPerWalletPercent",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "metisFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "metisRewardStore",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "openTrade", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "outAmounts",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pair", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pairContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pause",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "secureOperators",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "secureTransfer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAutoAddLiquidity",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAutoRebase",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBotBlacklist",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCheckPoint",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDevInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDisableAllFee",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDistributeGas",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDistributor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeReceivers",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFees",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setLP",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTokenPerWalletPercent",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetisRewardEnabled",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSecureOperator",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimeframeExpiresAfter",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimeframeQuotaIn",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimeframeQuotaOut",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelist",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "timeframeCurrent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeframeExpiresAfter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeframeQuotaInPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeframeQuotaOutPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryExtraSellFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllToTreasury",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "DEAD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DECIMALS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "InsuranceFundFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "InsuranceFundReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_UINT256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RATE_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ZERO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_autoAddLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_autoRebase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_initRebaseStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_isFeeExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_lastAddLiquidityTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_lastRebasedTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_metisRewardEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "autoLiquidityReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "blackHole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blackHoleFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "blacklist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkFeeExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "devAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "devFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disableAllFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributorGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountDividendsInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCirculatingSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityBacking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxTokenPerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOverviewOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserve1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserve2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimeframeQuotaIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimeframeQuotaOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "inAmounts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isNotInSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOpen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "manualSync", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxTokenPerWalletPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "metisFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "metisRewardStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "openTrade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "outAmounts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pairContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "secureOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secureTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAutoAddLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAutoRebase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBotBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCheckPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDevInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDisableAllFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDistributeGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeReceivers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setLP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTokenPerWalletPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetisRewardEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSecureOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimeframeExpiresAfter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimeframeQuotaIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimeframeQuotaOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timeframeCurrent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeframeExpiresAfter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeframeQuotaInPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeframeQuotaOutPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryExtraSellFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllToTreasury",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "LogRebase(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRebase"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface LogRebaseEventObject {
  epoch: BigNumber;
  totalSupply: BigNumber;
}
export type LogRebaseEvent = TypedEvent<
  [BigNumber, BigNumber],
  LogRebaseEventObject
>;

export type LogRebaseEventFilter = TypedEventFilter<LogRebaseEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface Abi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEAD(overrides?: CallOverrides): Promise<[string]>;

    DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    InsuranceFundFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    InsuranceFundReceiver(overrides?: CallOverrides): Promise<[string]>;

    MAX_UINT256(overrides?: CallOverrides): Promise<[BigNumber]>;

    RATE_DECIMALS(overrides?: CallOverrides): Promise<[number]>;

    ZERO(overrides?: CallOverrides): Promise<[string]>;

    _autoAddLiquidity(overrides?: CallOverrides): Promise<[boolean]>;

    _autoRebase(overrides?: CallOverrides): Promise<[boolean]>;

    _decimals(overrides?: CallOverrides): Promise<[number]>;

    _initRebaseStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    _isFeeExempt(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    _lastAddLiquidityTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    _lastRebasedTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    _metisRewardEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    _name(overrides?: CallOverrides): Promise<[string]>;

    _symbol(overrides?: CallOverrides): Promise<[string]>;

    _totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      owner_: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    autoLiquidityReceiver(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    blackHole(overrides?: CallOverrides): Promise<[string]>;

    blackHoleFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    blacklist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkFeeExempt(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkPoints(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    devAddress(overrides?: CallOverrides): Promise<[string]>;

    devFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    disableAllFee(overrides?: CallOverrides): Promise<[boolean]>;

    distributorAddress(overrides?: CallOverrides): Promise<[string]>;

    distributorGas(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeDenominator(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAccountDividendsInfo(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getCirculatingSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLiquidityBacking(
      accuracy: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMaxTokenPerWallet(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOverviewOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    getReserve1(overrides?: CallOverrides): Promise<[BigNumber]>;

    getReserve2(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTimeframeQuotaIn(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTimeframeQuotaOut(overrides?: CallOverrides): Promise<[BigNumber]>;

    inAmounts(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isNotInSwap(overrides?: CallOverrides): Promise<[boolean]>;

    isOpen(overrides?: CallOverrides): Promise<[boolean]>;

    liquidityFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    manualSync(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxTokenPerWalletPercent(overrides?: CallOverrides): Promise<[number]>;

    metisFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    metisRewardStore(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    openTrade(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    outAmounts(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pair(overrides?: CallOverrides): Promise<[string]>;

    pairContract(overrides?: CallOverrides): Promise<[string]>;

    pause(
      _set: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    secureOperators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    secureTransfer(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAutoAddLiquidity(
      _flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAutoRebase(
      _flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBotBlacklist(
      _botAddress: PromiseOrValue<string>,
      _flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCheckPoint(
      _addr: PromiseOrValue<string>,
      _checkValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDevInfo(
      _devAddress: PromiseOrValue<string>,
      _devFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDisableAllFee(
      _bSet: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDistributeGas(
      _gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDistributor(
      _distributorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeReceivers(
      _autoLiquidityReceiver: PromiseOrValue<string>,
      _treasuryReceiver: PromiseOrValue<string>,
      _InsuranceFundReceiver: PromiseOrValue<string>,
      _blackHole: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFees(
      _liquidityFee: PromiseOrValue<BigNumberish>,
      _treasuryFee: PromiseOrValue<BigNumberish>,
      _InsuranceFundFee: PromiseOrValue<BigNumberish>,
      _metisFee: PromiseOrValue<BigNumberish>,
      _treasuryExtraSellFee: PromiseOrValue<BigNumberish>,
      _blackHoleFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLP(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxTokenPerWalletPercent(
      _maxTokenPerWalletPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMetisRewardEnabled(
      _set: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSecureOperator(
      _secureOperator: PromiseOrValue<string>,
      _set: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTimeframeExpiresAfter(
      _timeframeExpiresAfter: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTimeframeQuotaIn(
      _timeframeQuotaIn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTimeframeQuotaOut(
      _timeframeQuotaOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWhitelist(
      _addr: PromiseOrValue<string>,
      _set: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    timeframeCurrent(overrides?: CallOverrides): Promise<[BigNumber]>;

    timeframeExpiresAfter(overrides?: CallOverrides): Promise<[BigNumber]>;

    timeframeQuotaInPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    timeframeQuotaOutPercentage(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    treasuryExtraSellFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    treasuryFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    treasuryReceiver(overrides?: CallOverrides): Promise<[string]>;

    withdrawAllToTreasury(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEAD(overrides?: CallOverrides): Promise<string>;

  DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  InsuranceFundFee(overrides?: CallOverrides): Promise<BigNumber>;

  InsuranceFundReceiver(overrides?: CallOverrides): Promise<string>;

  MAX_UINT256(overrides?: CallOverrides): Promise<BigNumber>;

  RATE_DECIMALS(overrides?: CallOverrides): Promise<number>;

  ZERO(overrides?: CallOverrides): Promise<string>;

  _autoAddLiquidity(overrides?: CallOverrides): Promise<boolean>;

  _autoRebase(overrides?: CallOverrides): Promise<boolean>;

  _decimals(overrides?: CallOverrides): Promise<number>;

  _initRebaseStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  _isFeeExempt(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  _lastAddLiquidityTime(overrides?: CallOverrides): Promise<BigNumber>;

  _lastRebasedTime(overrides?: CallOverrides): Promise<BigNumber>;

  _metisRewardEnabled(overrides?: CallOverrides): Promise<boolean>;

  _name(overrides?: CallOverrides): Promise<string>;

  _symbol(overrides?: CallOverrides): Promise<string>;

  _totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    owner_: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  autoLiquidityReceiver(overrides?: CallOverrides): Promise<string>;

  balanceOf(
    who: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  blackHole(overrides?: CallOverrides): Promise<string>;

  blackHoleFee(overrides?: CallOverrides): Promise<BigNumber>;

  blacklist(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkFeeExempt(
    _addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkPoints(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claim(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  devAddress(overrides?: CallOverrides): Promise<string>;

  devFee(overrides?: CallOverrides): Promise<BigNumber>;

  disableAllFee(overrides?: CallOverrides): Promise<boolean>;

  distributorAddress(overrides?: CallOverrides): Promise<string>;

  distributorGas(overrides?: CallOverrides): Promise<BigNumber>;

  feeDenominator(overrides?: CallOverrides): Promise<BigNumber>;

  getAccountDividendsInfo(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  getCirculatingSupply(overrides?: CallOverrides): Promise<BigNumber>;

  getLiquidityBacking(
    accuracy: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaxTokenPerWallet(overrides?: CallOverrides): Promise<BigNumber>;

  getOverviewOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

  getReserve1(overrides?: CallOverrides): Promise<BigNumber>;

  getReserve2(
    who: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTimeframeQuotaIn(overrides?: CallOverrides): Promise<BigNumber>;

  getTimeframeQuotaOut(overrides?: CallOverrides): Promise<BigNumber>;

  inAmounts(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isNotInSwap(overrides?: CallOverrides): Promise<boolean>;

  isOpen(overrides?: CallOverrides): Promise<boolean>;

  liquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

  manualSync(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxTokenPerWalletPercent(overrides?: CallOverrides): Promise<number>;

  metisFee(overrides?: CallOverrides): Promise<BigNumber>;

  metisRewardStore(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  openTrade(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  outAmounts(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pair(overrides?: CallOverrides): Promise<string>;

  pairContract(overrides?: CallOverrides): Promise<string>;

  pause(
    _set: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  secureOperators(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  secureTransfer(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAutoAddLiquidity(
    _flag: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAutoRebase(
    _flag: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBotBlacklist(
    _botAddress: PromiseOrValue<string>,
    _flag: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCheckPoint(
    _addr: PromiseOrValue<string>,
    _checkValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDevInfo(
    _devAddress: PromiseOrValue<string>,
    _devFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDisableAllFee(
    _bSet: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDistributeGas(
    _gasLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDistributor(
    _distributorAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeReceivers(
    _autoLiquidityReceiver: PromiseOrValue<string>,
    _treasuryReceiver: PromiseOrValue<string>,
    _InsuranceFundReceiver: PromiseOrValue<string>,
    _blackHole: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFees(
    _liquidityFee: PromiseOrValue<BigNumberish>,
    _treasuryFee: PromiseOrValue<BigNumberish>,
    _InsuranceFundFee: PromiseOrValue<BigNumberish>,
    _metisFee: PromiseOrValue<BigNumberish>,
    _treasuryExtraSellFee: PromiseOrValue<BigNumberish>,
    _blackHoleFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLP(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxTokenPerWalletPercent(
    _maxTokenPerWalletPercent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMetisRewardEnabled(
    _set: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSecureOperator(
    _secureOperator: PromiseOrValue<string>,
    _set: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTimeframeExpiresAfter(
    _timeframeExpiresAfter: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTimeframeQuotaIn(
    _timeframeQuotaIn: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTimeframeQuotaOut(
    _timeframeQuotaOut: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWhitelist(
    _addr: PromiseOrValue<string>,
    _set: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapEnabled(overrides?: CallOverrides): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  timeframeCurrent(overrides?: CallOverrides): Promise<BigNumber>;

  timeframeExpiresAfter(overrides?: CallOverrides): Promise<BigNumber>;

  timeframeQuotaInPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  timeframeQuotaOutPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  totalFee(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  treasuryExtraSellFee(overrides?: CallOverrides): Promise<BigNumber>;

  treasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

  treasuryReceiver(overrides?: CallOverrides): Promise<string>;

  withdrawAllToTreasury(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEAD(overrides?: CallOverrides): Promise<string>;

    DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    InsuranceFundFee(overrides?: CallOverrides): Promise<BigNumber>;

    InsuranceFundReceiver(overrides?: CallOverrides): Promise<string>;

    MAX_UINT256(overrides?: CallOverrides): Promise<BigNumber>;

    RATE_DECIMALS(overrides?: CallOverrides): Promise<number>;

    ZERO(overrides?: CallOverrides): Promise<string>;

    _autoAddLiquidity(overrides?: CallOverrides): Promise<boolean>;

    _autoRebase(overrides?: CallOverrides): Promise<boolean>;

    _decimals(overrides?: CallOverrides): Promise<number>;

    _initRebaseStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    _isFeeExempt(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _lastAddLiquidityTime(overrides?: CallOverrides): Promise<BigNumber>;

    _lastRebasedTime(overrides?: CallOverrides): Promise<BigNumber>;

    _metisRewardEnabled(overrides?: CallOverrides): Promise<boolean>;

    _name(overrides?: CallOverrides): Promise<string>;

    _symbol(overrides?: CallOverrides): Promise<string>;

    _totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner_: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    autoLiquidityReceiver(overrides?: CallOverrides): Promise<string>;

    balanceOf(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blackHole(overrides?: CallOverrides): Promise<string>;

    blackHoleFee(overrides?: CallOverrides): Promise<BigNumber>;

    blacklist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkFeeExempt(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkPoints(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    devAddress(overrides?: CallOverrides): Promise<string>;

    devFee(overrides?: CallOverrides): Promise<BigNumber>;

    disableAllFee(overrides?: CallOverrides): Promise<boolean>;

    distributorAddress(overrides?: CallOverrides): Promise<string>;

    distributorGas(overrides?: CallOverrides): Promise<BigNumber>;

    feeDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountDividendsInfo(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getCirculatingSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidityBacking(
      accuracy: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxTokenPerWallet(overrides?: CallOverrides): Promise<BigNumber>;

    getOverviewOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    getReserve1(overrides?: CallOverrides): Promise<BigNumber>;

    getReserve2(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimeframeQuotaIn(overrides?: CallOverrides): Promise<BigNumber>;

    getTimeframeQuotaOut(overrides?: CallOverrides): Promise<BigNumber>;

    inAmounts(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(overrides?: CallOverrides): Promise<void>;

    isNotInSwap(overrides?: CallOverrides): Promise<boolean>;

    isOpen(overrides?: CallOverrides): Promise<boolean>;

    liquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    manualSync(overrides?: CallOverrides): Promise<void>;

    maxTokenPerWalletPercent(overrides?: CallOverrides): Promise<number>;

    metisFee(overrides?: CallOverrides): Promise<BigNumber>;

    metisRewardStore(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    openTrade(overrides?: CallOverrides): Promise<void>;

    outAmounts(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pair(overrides?: CallOverrides): Promise<string>;

    pairContract(overrides?: CallOverrides): Promise<string>;

    pause(
      _set: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    router(overrides?: CallOverrides): Promise<string>;

    secureOperators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    secureTransfer(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setAutoAddLiquidity(
      _flag: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAutoRebase(
      _flag: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBotBlacklist(
      _botAddress: PromiseOrValue<string>,
      _flag: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCheckPoint(
      _addr: PromiseOrValue<string>,
      _checkValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDevInfo(
      _devAddress: PromiseOrValue<string>,
      _devFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDisableAllFee(
      _bSet: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDistributeGas(
      _gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDistributor(
      _distributorAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeReceivers(
      _autoLiquidityReceiver: PromiseOrValue<string>,
      _treasuryReceiver: PromiseOrValue<string>,
      _InsuranceFundReceiver: PromiseOrValue<string>,
      _blackHole: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFees(
      _liquidityFee: PromiseOrValue<BigNumberish>,
      _treasuryFee: PromiseOrValue<BigNumberish>,
      _InsuranceFundFee: PromiseOrValue<BigNumberish>,
      _metisFee: PromiseOrValue<BigNumberish>,
      _treasuryExtraSellFee: PromiseOrValue<BigNumberish>,
      _blackHoleFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLP(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTokenPerWalletPercent(
      _maxTokenPerWalletPercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMetisRewardEnabled(
      _set: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSecureOperator(
      _secureOperator: PromiseOrValue<string>,
      _set: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTimeframeExpiresAfter(
      _timeframeExpiresAfter: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTimeframeQuotaIn(
      _timeframeQuotaIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTimeframeQuotaOut(
      _timeframeQuotaOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelist(
      _addr: PromiseOrValue<string>,
      _set: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapEnabled(overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    timeframeCurrent(overrides?: CallOverrides): Promise<BigNumber>;

    timeframeExpiresAfter(overrides?: CallOverrides): Promise<BigNumber>;

    timeframeQuotaInPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    timeframeQuotaOutPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    totalFee(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    treasuryExtraSellFee(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryReceiver(overrides?: CallOverrides): Promise<string>;

    withdrawAllToTreasury(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "LogRebase(uint256,uint256)"(
      epoch?: PromiseOrValue<BigNumberish> | null,
      totalSupply?: null
    ): LogRebaseEventFilter;
    LogRebase(
      epoch?: PromiseOrValue<BigNumberish> | null,
      totalSupply?: null
    ): LogRebaseEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    DEAD(overrides?: CallOverrides): Promise<BigNumber>;

    DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    InsuranceFundFee(overrides?: CallOverrides): Promise<BigNumber>;

    InsuranceFundReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_UINT256(overrides?: CallOverrides): Promise<BigNumber>;

    RATE_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    ZERO(overrides?: CallOverrides): Promise<BigNumber>;

    _autoAddLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    _autoRebase(overrides?: CallOverrides): Promise<BigNumber>;

    _decimals(overrides?: CallOverrides): Promise<BigNumber>;

    _initRebaseStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    _isFeeExempt(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _lastAddLiquidityTime(overrides?: CallOverrides): Promise<BigNumber>;

    _lastRebasedTime(overrides?: CallOverrides): Promise<BigNumber>;

    _metisRewardEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    _name(overrides?: CallOverrides): Promise<BigNumber>;

    _symbol(overrides?: CallOverrides): Promise<BigNumber>;

    _totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner_: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    autoLiquidityReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blackHole(overrides?: CallOverrides): Promise<BigNumber>;

    blackHoleFee(overrides?: CallOverrides): Promise<BigNumber>;

    blacklist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkFeeExempt(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkPoints(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    devAddress(overrides?: CallOverrides): Promise<BigNumber>;

    devFee(overrides?: CallOverrides): Promise<BigNumber>;

    disableAllFee(overrides?: CallOverrides): Promise<BigNumber>;

    distributorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    distributorGas(overrides?: CallOverrides): Promise<BigNumber>;

    feeDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountDividendsInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getCirculatingSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidityBacking(
      accuracy: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxTokenPerWallet(overrides?: CallOverrides): Promise<BigNumber>;

    getOverviewOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserve1(overrides?: CallOverrides): Promise<BigNumber>;

    getReserve2(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimeframeQuotaIn(overrides?: CallOverrides): Promise<BigNumber>;

    getTimeframeQuotaOut(overrides?: CallOverrides): Promise<BigNumber>;

    inAmounts(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isNotInSwap(overrides?: CallOverrides): Promise<BigNumber>;

    isOpen(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    manualSync(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxTokenPerWalletPercent(overrides?: CallOverrides): Promise<BigNumber>;

    metisFee(overrides?: CallOverrides): Promise<BigNumber>;

    metisRewardStore(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    openTrade(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    outAmounts(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pair(overrides?: CallOverrides): Promise<BigNumber>;

    pairContract(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      _set: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    secureOperators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    secureTransfer(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAutoAddLiquidity(
      _flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAutoRebase(
      _flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBotBlacklist(
      _botAddress: PromiseOrValue<string>,
      _flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCheckPoint(
      _addr: PromiseOrValue<string>,
      _checkValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDevInfo(
      _devAddress: PromiseOrValue<string>,
      _devFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDisableAllFee(
      _bSet: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDistributeGas(
      _gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDistributor(
      _distributorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeReceivers(
      _autoLiquidityReceiver: PromiseOrValue<string>,
      _treasuryReceiver: PromiseOrValue<string>,
      _InsuranceFundReceiver: PromiseOrValue<string>,
      _blackHole: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFees(
      _liquidityFee: PromiseOrValue<BigNumberish>,
      _treasuryFee: PromiseOrValue<BigNumberish>,
      _InsuranceFundFee: PromiseOrValue<BigNumberish>,
      _metisFee: PromiseOrValue<BigNumberish>,
      _treasuryExtraSellFee: PromiseOrValue<BigNumberish>,
      _blackHoleFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLP(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxTokenPerWalletPercent(
      _maxTokenPerWalletPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMetisRewardEnabled(
      _set: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSecureOperator(
      _secureOperator: PromiseOrValue<string>,
      _set: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTimeframeExpiresAfter(
      _timeframeExpiresAfter: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTimeframeQuotaIn(
      _timeframeQuotaIn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTimeframeQuotaOut(
      _timeframeQuotaOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWhitelist(
      _addr: PromiseOrValue<string>,
      _set: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    timeframeCurrent(overrides?: CallOverrides): Promise<BigNumber>;

    timeframeExpiresAfter(overrides?: CallOverrides): Promise<BigNumber>;

    timeframeQuotaInPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    timeframeQuotaOutPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    totalFee(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    treasuryExtraSellFee(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawAllToTreasury(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEAD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    InsuranceFundFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    InsuranceFundReceiver(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_UINT256(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RATE_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ZERO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _autoAddLiquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _autoRebase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _initRebaseStartTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _isFeeExempt(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _lastAddLiquidityTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _lastRebasedTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _metisRewardEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner_: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    autoLiquidityReceiver(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blackHole(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blackHoleFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blacklist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkFeeExempt(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkPoints(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    devAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    devFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disableAllFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributorAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distributorGas(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeDenominator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountDividendsInfo(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCirculatingSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidityBacking(
      accuracy: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxTokenPerWallet(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOverviewOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserve1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReserve2(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimeframeQuotaIn(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimeframeQuotaOut(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inAmounts(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isNotInSwap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOpen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manualSync(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxTokenPerWalletPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    metisFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    metisRewardStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openTrade(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    outAmounts(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      _set: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    secureOperators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    secureTransfer(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAutoAddLiquidity(
      _flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAutoRebase(
      _flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBotBlacklist(
      _botAddress: PromiseOrValue<string>,
      _flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCheckPoint(
      _addr: PromiseOrValue<string>,
      _checkValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDevInfo(
      _devAddress: PromiseOrValue<string>,
      _devFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDisableAllFee(
      _bSet: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDistributeGas(
      _gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDistributor(
      _distributorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeReceivers(
      _autoLiquidityReceiver: PromiseOrValue<string>,
      _treasuryReceiver: PromiseOrValue<string>,
      _InsuranceFundReceiver: PromiseOrValue<string>,
      _blackHole: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFees(
      _liquidityFee: PromiseOrValue<BigNumberish>,
      _treasuryFee: PromiseOrValue<BigNumberish>,
      _InsuranceFundFee: PromiseOrValue<BigNumberish>,
      _metisFee: PromiseOrValue<BigNumberish>,
      _treasuryExtraSellFee: PromiseOrValue<BigNumberish>,
      _blackHoleFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLP(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTokenPerWalletPercent(
      _maxTokenPerWalletPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMetisRewardEnabled(
      _set: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSecureOperator(
      _secureOperator: PromiseOrValue<string>,
      _set: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTimeframeExpiresAfter(
      _timeframeExpiresAfter: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTimeframeQuotaIn(
      _timeframeQuotaIn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTimeframeQuotaOut(
      _timeframeQuotaOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWhitelist(
      _addr: PromiseOrValue<string>,
      _set: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeframeCurrent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeframeExpiresAfter(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timeframeQuotaInPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timeframeQuotaOutPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    treasuryExtraSellFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    treasuryFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasuryReceiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawAllToTreasury(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
